;; (module prelude.list)
(require prelude/typeclass/classes)
(provide reverse
         sum
         length
         filter)

;; Reverse a list.
;; Usage:
;;     (reverse '(1 2 3 4 5))
;;     '(5 4 3 2 1)
(let reverse
    (lambda (xs)
      (foldl
       (lambda (acc x) (cons x acc))
       '()
       xs)))

;; Sum of a list of numbers
;; Usage:
;;     (sum '(1 2 3)) -> 6
(let sum
    (lambda (ns)
      (foldl
       (lambda (acc n) (+ n acc))
       0
       ns)))

;; Length of a list
;; Usage:
;;     (length '(4 5 6)) -> 3
(let length
    (lambda (ns)
      (foldl
       (lambda (acc n) (+ 1 acc))
       0
       ns)))

;; Filter a list based on a predicate function
;; Arguments:
;;     predicate -> A function of type (a -> boolean)
;;     xs        -> A list of values of type (a)
;; Returns:
;;     A list of values of type (a), <= the length of xs,
;;       containing values for which predicate(x) == true.
;; Usage:
;;     (let eq2 (lambda (x) (equal? x 2)))
;;     (filter eq2 '(1 2 3 4 5 2 6 7 8)) -> '(2 2)
(let filter
    (lambda (predicate xs)
      (foldr
       (lambda (x acc) (if (predicate x) (cons x acc) acc))
       '()
       xs)))
