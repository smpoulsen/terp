;; (module prelude.list)
(provide foldl
         foldr
         reverse
         map
         sum
         length
         filter
         )

;; Fold a list into a single value using the provided function.
;; foldl evaluates from left to right.
;; Arguments:
;;     fn          -> A function that takes a value and an accumulator;
;;                    must return a value of the same type as the accumulator.
;;     values      -> A list of values. Lists must be quoted, e.g. '(1 2 3).
;;     accumulator -> An initial value to collect values into.
;; Usage:
;;     (foldl (lambda (n acc) (+ n acc)) 0 '(1 10 100 1000)) -> 1111
;;     (foldl (lambda (x y) (cons y x)) '() '(1 2 3 4)) -> '(1 2 3 4)
(letrec foldl
  (lambda (fn accumulator values)
    (if (empty? values)
        accumulator
        (foldl fn (fn accumulator (car values)) (cdr values)))))

;; Fold a list into a single value using the provided function.
;; foldr evaluates from right to left.
;; Arguments:
;;     fn          -> A function that takes a value and an accumulator;
;;                    must return a value of the same type as the accumulator.
;;     values      -> A list of values. Lists must be quoted, e.g. '(1 2 3).
;;     accumulator -> An initial value to collect values into.
;; Usage:
;;     (foldr (lambda (acc n) (+ n acc)) 0 '(1 10 100 1000)) -> 1111
;;     (foldl (lambda (x y) (cons x y)) '() '(1 2 3 4)) -> '(1 2 3 4)
(letrec foldr
  (lambda (fn accumulator values)
    (if (empty? values)
        accumulator
        (fn (car values) (foldr fn accumulator (cdr values))))))

;; Reverse a list.
;; Usage:
;;     (reverse '(1 2 3 4 5))
;;     '(5 4 3 2 1)
(let reverse
    (lambda (xs)
      (foldl
       (lambda (acc x) (cons x acc))
       '()
       xs)))

;; Map a function over a collection of items.
;; Usage:
;;     (map (lambda (x) (* 2 x)) '(1 2 3 4 5))
;;     '(2 4 6 8 10)
  (let mapl
      (lambda (f xs)
      (foldr
       (lambda (x acc) (cons (f x) acc))
       '()
       xs)))

;; Sum of a list of numbers
;; Usage:
;;     (sum '(1 2 3)) -> 6
(let sum
    (lambda (ns)
      (foldl
       (lambda (acc n) (+ n acc))
       0
       ns)))

;; Length of a list
;; Usage:
;;     (length '(4 5 6)) -> 3
(let length
    (lambda (ns)
      (foldl
       (lambda (acc n) (+ 1 acc))
       0
       ns)))

;; Filter a list based on a predicate function
;; Arguments:
;;     predicate -> A function of type (a -> boolean)
;;     xs        -> A list of values of type (a)
;; Returns:
;;     A list of values of type (a), <= the length of xs,
;;       containing values for which predicate(x) == true.
;; Usage:
;;     (let eq2 (lambda (x) (equal? x 2)))
;;     (filter eq2 '(1 2 3 4 5 2 6 7 8)) -> '(2 2)
(let filter
    (lambda (predicate xs)
      (foldr
       (lambda (x acc) (if (predicate x) (cons x acc) acc))
       '()
       xs)))
