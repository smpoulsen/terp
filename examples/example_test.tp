;; Examples of writing tests.
;; Test files must end in `_test.tp`

(require prelude/test
         prelude/typeclass/classes)

;; Some basic example assertions/refutations:
(test "true is true"
  (assert (equal? #t #t)))

(test "5 is 5"
  (assert (equal? 5 5)))

(test "false is not true"
  (refute (equal? #f #t)))

;; Testing something that actually does something;
;; uses functions/variables bound in the global scope.
(defn plus2 (x)
  (+ 2 x))

(let ls '(1 2 3 4 5))

(test "mapping plus2 with external variables"
  (assert (equal?
          (map plus2 ls)
          '(3 4 5 6 7))))

;; A test that locally binds variables for test setup.
(test "plus2 adds 2 with local vars"
      (let-values
          ([plus2 (lambda (x) (+ 2 x))]
           [ls '(2 3 4 5 6)]
           [mapped-values (map plus2 ls)])
        (assert (equal? mapped-values '(4 5 6 7 8)))))
